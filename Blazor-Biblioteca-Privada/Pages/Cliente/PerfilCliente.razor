@page "/perfil"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<div class="form-container">
    <h2 class="form-title">Mi Perfil</h2>

    @if (!string.IsNullOrEmpty(mensajeError))
    {
        <div class="form-error">
            @mensajeError
        </div>
    }

    @if (isLoading)
    {
        <div class="loading-spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (cliente != null)
    {
        <div class="profile-info">
            <div class="info-group">
                <label class="info-label">Nombre</label>
                <p class="info-value">@cliente.Nombre</p>
            </div>

            <div class="info-group">
                <label class="info-label">Email</label>
                <p class="info-value">@cliente.Email</p>
            </div>

            <div class="info-group">
                <label class="info-label">Saldo</label>
                <p class="info-value">$@cliente.Saldo.ToString("F2")</p>
                <button class="btn-primary" @onclick="MostrarInputRecarga">Recargar saldo</button>
                @if (mostrarInputRecarga)
                {
                    <input type="number" min="1" @bind="montoRecarga" placeholder="Monto a recargar" />
                    <button class="btn-primary" @onclick="RecargarSaldo">Confirmar</button>
                    @if (!string.IsNullOrEmpty(mensajeRecarga))
                    {
                        <span>@mensajeRecarga</span>
                    }
                }
            </div>

            <div class="button-group">
                <button class="btn-secondary" @onclick="CerrarSesion">Cerrar Sesión</button>
                <button class="btn-primary" @onclick="() => EditarPerfil(cliente.Id)">Editar Perfil</button>
                <a href="/" class="btn-secondary">Regresar</a>
                <button class="btn-info" @onclick="MostrarPedidos">Pedidos</button>
            </div>
        </div>

        @if (mostrarPedidos && pedidos != null && pedidos.Any())
        {
            <h3 class="section-title">Mis Pedidos</h3>
            <div class="pedidos-list">
                @foreach (var pedido in pedidos)
                {
                    <div class="pedido-card">
                        <div class="pedido-header">
                            <span class="pedido-fecha">@pedido.Fecha.ToString("dd/MM/yyyy HH:mm")</span>
                            <span class="pedido-total">$@pedido.Total.ToString("F2")</span>
                            <span class="pedido-estado">@pedido.Estado</span>
                        </div>
                        <p class="pedido-libros">@pedido.Libros</p>
                    </div>
                }
            </div>
        }
    }
</div>

<style>
    .profile-info {
        background: #f8fafc;
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 2rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .info-group {
        margin-bottom: 1.5rem;
    }

    .info-label {
        font-weight: 600;
        color: #64748b;
        font-size: 0.875rem;
        margin-bottom: 0.25rem;
        display: block;
    }

    .info-value {
        color: #1e293b;
        font-size: 1rem;
        margin: 0;
    }

    .section-title {
        color: #1f2937;
        font-size: 1.25rem;
        font-weight: 600;
        margin: 2rem 0 1rem;
    }

    .pedidos-list {
        display: grid;
        gap: 1rem;
    }

    .pedido-card {
        background: #fff;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 1rem;
        transition: transform 0.2s;
    }

    .pedido-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .pedido-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
    }

    .pedido-fecha {
        color: #64748b;
        font-size: 0.875rem;
    }

    .pedido-total {
        font-weight: 600;
        color: #2563eb;
    }

    .pedido-libros {
        color: #4b5563;
        font-size: 0.875rem;
        margin: 0;
    }

    .loading-spinner {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 200px;
    }

    .button-group {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
    }

    .btn-primary {
        background-color: #2563eb;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        border: none;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .btn-primary:hover {
        background-color: #1d4ed8;
    }

    .btn-secondary {
        background-color: #e2e8f0;
        color: #1e293b;
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        border: none;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
        text-decoration: none;
    }

    .btn-secondary:hover {
        background-color: #cbd5e1;
    }

    .form-error {
        background-color: #fee2e2;
        border-color: #fecaca;
        color: #991b1b;
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 0.375rem;
    }
</style>

@code {
    private ClienteModel? cliente;
    private List<PedidoModel>? pedidos;
    private string? mensajeError;
    private bool isLoading = true;
    private bool mostrarInputRecarga = false;
    private double montoRecarga = 0;
    private string mensajeRecarga = string.Empty;
    private bool mostrarPedidos = false;

    private class ClienteModel
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public double Saldo { get; set; }
    }

    private class PedidoModel
    {
        public int Id { get; set; }
        public string Libros { get; set; } = string.Empty;
        public double Total { get; set; }
        public DateTime Fecha { get; set; }
        public string Estado { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("token");
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var userId = await LocalStorage.GetItemAsync<int>("userId");
        if (userId == 0)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        try
        {
            cliente = await Http.GetFromJsonAsync<ClienteModel>($"api/Clientes/{userId}");
        }
        catch (Exception ex)
        {
            mensajeError = $"No se pudo cargar el perfil: {ex.Message}";
        }

        try
        {
            pedidos = await Http.GetFromJsonAsync<List<PedidoModel>>($"api/pedido/cliente/{userId}");
        }
        catch (Exception ex)
        {
            pedidos = new();
        }

        isLoading = false;
    }

    private void EditarPerfil(int id)
    {
        NavigationManager.NavigateTo($"/cliente/editar/{id}");
    }

    private async Task CerrarSesion()
    {
        try
        {
            await LocalStorage.RemoveItemAsync("userId");
            await LocalStorage.RemoveItemAsync("token");
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al cerrar sesión: {ex.Message}";
        }
    }

    private void MostrarInputRecarga()
    {
        mostrarInputRecarga = true;
        mensajeRecarga = string.Empty;
    }

    private async Task RecargarSaldo()
    {
        if (montoRecarga <= 0 || cliente == null)
        {
            mensajeRecarga = "Ingrese un monto válido.";
            return;
        }
        var response = await Http.PostAsJsonAsync("api/Clientes/recargar-saldo", new { ClienteId = cliente.Id, Monto = montoRecarga });
        if (response.IsSuccessStatusCode)
        {
            var nuevoSaldo = await response.Content.ReadFromJsonAsync<double>();
            cliente.Saldo = nuevoSaldo;
            mensajeRecarga = "¡Recarga exitosa!";
            mostrarInputRecarga = false;
        }
        else
        {
            mensajeRecarga = "Error al recargar saldo.";
        }
    }

    private void MostrarPedidos()
    {
        mostrarPedidos = !mostrarPedidos;
    }
} 