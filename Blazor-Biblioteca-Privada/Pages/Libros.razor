@page "/libros"
@using BlazorApp.Entidades
@using BlazorApp.Negocio
@inject LibroNegocio libroNegocio
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="catalog-container">
	<div class="catalog-header">
		<h2>Catálogo de Libros</h2>
		<div class="search-bar">
			<input type="text" @bind="searchTerm" @bind:event="oninput" placeholder="Buscar por título o autor..." />
			<button class="btn btn-primary" @onclick="FiltrarLibros">Buscar</button>
		</div>
	</div>

	@if (libros == null)
	{
		<div class="loading-message">
			<p><em>Cargando catálogo...</em></p>
		</div>
	}
	else if (libros.Count == 0)
	{
		<div class="empty-message">
			<p><em>No hay libros disponibles en este momento.</em></p>
		</div>
	}
	else
	{
		<div class="books-grid">
			@foreach (var libro in librosFiltrados)
			{
				<div class="book-card">
					<div class="book-info">
						<h3 class="book-title">@libro.titulo</h3>
						<p class="book-author">por @libro.autor</p>
						<p class="book-price">$@libro.precio.ToString("F2")</p>
						<p class="book-stock">Stock: @libro.stock unidades</p>
					</div>
					<div class="book-actions">
						@if (libro.stock > 0)
						{
							<div class="quantity-selector">
								<button class="btn btn-sm btn-outline-primary" @onclick="() => DecrementarCantidad(libro.id)">-</button>
								<span>@ObtenerCantidad(libro.id)</span>
								<button class="btn btn-sm btn-outline-primary" @onclick="() => IncrementarCantidad(libro.id)" disabled="@(ObtenerCantidad(libro.id) >= libro.stock)">+</button>
							</div>
							<button class="btn btn-primary" @onclick="() => AgregarAlPedido(libro)" disabled="@(ObtenerCantidad(libro.id) == 0)">
								Agregar al Pedido
							</button>
						}
						else
						{
							<span class="out-of-stock">Agotado</span>
						}
					</div>
				</div>
			}
		</div>

		@if (librosPedido.Count > 0)
		{
			<div class="order-summary">
				<h3>Resumen del Pedido</h3>
				<div class="order-items">
					@foreach (var item in librosPedido)
					{
						<div class="order-item">
							<span>@item.titulo x @item.cantidadPedida</span>
							<span>$@(item.precio * item.cantidadPedida)</span>
							<button class="btn btn-sm btn-danger" @onclick="() => QuitarDelPedido(item)">Quitar</button>
						</div>
					}
				</div>
				<div class="order-total">
					<span>Total:</span>
					<span>$@totalPedido.ToString("F2")</span>
				</div>
				<button class="btn btn-success" @onclick="RealizarPedido">Realizar Pedido</button>
				@if (!string.IsNullOrEmpty(mensajeCompra))
				{
					<div class="alert alert-success">@mensajeCompra</div>
				}
			</div>
		}
	}
	<button class="btn btn-info" @onclick="IrAPedidos">Ver mis pedidos</button>
</div>

<style>
	.catalog-container {
		padding: 20px;
		max-width: 1200px;
		margin: 0 auto;
	}

	.catalog-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 30px;
	}

	.search-bar {
		display: flex;
		gap: 10px;
	}

	.search-bar input {
		padding: 8px;
		border: 1px solid #ddd;
		border-radius: 4px;
		width: 300px;
	}

	.books-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
		gap: 20px;
		margin-bottom: 30px;
	}

	.book-card {
		border: 1px solid #ddd;
		border-radius: 8px;
		padding: 20px;
		background: white;
		box-shadow: 0 2px 4px rgba(0,0,0,0.1);
	}

	.book-info {
		margin-bottom: 15px;
	}

	.book-title {
		font-size: 1.2rem;
		margin: 0 0 10px 0;
	}

	.book-author {
		color: #666;
		margin: 5px 0;
	}

	.book-price {
		font-size: 1.1rem;
		font-weight: bold;
		color: #2563eb;
		margin: 5px 0;
	}

	.book-stock {
		color: #666;
		font-size: 0.9rem;
	}

	.book-actions {
		display: flex;
		flex-direction: column;
		gap: 10px;
	}

	.quantity-selector {
		display: flex;
		align-items: center;
		gap: 10px;
		justify-content: center;
	}

	.out-of-stock {
		color: #dc2626;
		font-weight: 500;
		text-align: center;
	}

	.order-summary {
		position: sticky;
		bottom: 0;
		background: white;
		padding: 20px;
		border-top: 1px solid #ddd;
		box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
	}

	.order-items {
		margin: 15px 0;
	}

	.order-item {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 10px 0;
		border-bottom: 1px solid #eee;
	}

	.order-total {
		display: flex;
		justify-content: space-between;
		font-weight: bold;
		margin: 15px 0;
		font-size: 1.2rem;
	}
</style>

@code {
	private List<Libro> libros;
	private List<Libro> librosFiltrados;
	private List<LibroPedido> librosPedido = new List<LibroPedido>();
	private Dictionary<int, int> cantidades = new Dictionary<int, int>();
	private string searchTerm = "";
	private double totalPedido => librosPedido.Sum(l => l.precio * l.cantidadPedida);
	private string mensajeCompra = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		libros = await libroNegocio.listarLibros();
		librosFiltrados = libros;
	}

	private void FiltrarLibros()
	{
		if (string.IsNullOrWhiteSpace(searchTerm))
		{
			librosFiltrados = libros;
		}
		else
		{
			librosFiltrados = libros.Where(l => 
				l.titulo.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || 
				l.autor.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
			).ToList();
		}
	}

	private int ObtenerCantidad(int libroId)
	{
		return cantidades.ContainsKey(libroId) ? cantidades[libroId] : 0;
	}

	private void IncrementarCantidad(int libroId)
	{
		var libro = libros.FirstOrDefault(l => l.id == libroId);
		if (libro != null)
		{
			if (!cantidades.ContainsKey(libroId))
			{
				cantidades[libroId] = 0;
			}
			if (cantidades[libroId] < libro.stock)
			{
				cantidades[libroId]++;
			}
		}
	}

	private void DecrementarCantidad(int libroId)
	{
		if (cantidades.ContainsKey(libroId) && cantidades[libroId] > 0)
		{
			cantidades[libroId]--;
		}
	}

	private void AgregarAlPedido(Libro libro)
	{
		var cantidad = ObtenerCantidad(libro.id);
		if (cantidad > 0)
		{
			var libroPedido = librosPedido.FirstOrDefault(l => l.id == libro.id);
			if (libroPedido != null)
			{
				libroPedido.cantidadPedida = cantidad;
			}
			else
			{
				librosPedido.Add(new LibroPedido
				{
					id = libro.id,
					titulo = libro.titulo,
					autor = libro.autor,
					precio = libro.precio,
					cantidadPedida = cantidad
				});
			}
			cantidades[libro.id] = 0;
		}
	}

	private void QuitarDelPedido(LibroPedido libro)
	{
		librosPedido.RemoveAll(l => l.id == libro.id);
	}

	private void IrAPedidos()
	{
		NavigationManager.NavigateTo("/pedidos");
	}

	private async Task RealizarPedido()
	{
		try
		{
			var userId = await LocalStorage.GetItemAsync<int>("userId");
			if (userId == 0)
			{
				NavigationManager.NavigateTo("/login");
				return;
			}
			var pedido = new Pedido
			{
				IdCliente = userId,
				Libros = string.Join(", ", librosPedido.Select(l => $"{l.titulo} x{l.cantidadPedida}")),
				Total = totalPedido,
				Fecha = DateTime.Now,
				Estado = "Comprado"
			};
			var response = await Http.PostAsJsonAsync("api/pedidos/nuevo", pedido);
			if (response.IsSuccessStatusCode)
			{
				mensajeCompra = "¡Compra exitosa!";
				librosPedido.Clear();
				cantidades.Clear();
				await OnInitializedAsync();
			}
			else
			{
				mensajeCompra = "Error al realizar la compra.";
			}
		}
		catch (Exception ex)
		{
			mensajeCompra = $"Error al realizar el pedido: {ex.Message}";
		}
	}

	private class LibroPedido
	{
		public int id { get; set; }
		public string titulo { get; set; }
		public string autor { get; set; }
		public double precio { get; set; }
		public int cantidadPedida { get; set; }
	}
}
